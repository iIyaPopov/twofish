
public class QFunction {
	private static final int[][] q0 = {
		{0x8, 0x1, 0x7, 0xD, 0x6, 0xF, 0x3, 0x2, 0x0, 0xB, 0x5, 0x9, 0xE, 0xC, 0xA, 0x4},
		{0xE, 0xC, 0xB, 0x8, 0x1, 0x2, 0x3, 0x5, 0xF, 0x4, 0xA, 0x6, 0x7, 0x0, 0x9, 0xD},
		{0xB, 0xA, 0x5, 0xE, 0x6, 0xD, 0x9, 0x0, 0xC, 0x8, 0xF, 0x3, 0x2, 0x4, 0x7, 0x1},
		{0xD, 0x7, 0xF, 0x4, 0x1, 0x2, 0x6, 0xE, 0x9, 0xB, 0x3, 0x0, 0x8, 0x5, 0xC, 0xA},
	};
	private static final int[][] q1 = {
		{0x2, 0x8, 0xB, 0xD, 0xF, 0x7, 0x6, 0xE, 0x3, 0x1, 0x9, 0x4, 0x0, 0xA, 0xC, 0x5},
		{0x1, 0xE, 0x2, 0xB, 0x4, 0xC, 0x3, 0x7, 0x6, 0xD, 0xA, 0x5, 0xF, 0x9, 0x0, 0x8},
		{0x4, 0xC, 0x7, 0x5, 0x1, 0x6, 0x9, 0xA, 0x0, 0xE, 0xD, 0x8, 0x2, 0xB, 0x3, 0xF},
		{0xB, 0x9, 0x5, 0x1, 0xC, 0x3, 0xD, 0xE, 0x6, 0x4, 0x7, 0xF, 0x2, 0x0, 0x8, 0xA},
	};
	private final int Q0 = 0;
	private final int Q1 = 1;
	private final int MASK = 0xff;
	
	//functionType - 0 or 1 (f0 or f1)
	public byte run(byte x, int type) {
		int a0 = (x & 0xff) >> 4;
		int b0 = (x & 0xff) % 16;
		int a1 = a0 ^ b0;
		int b1 = a0 ^ CyclicShift.toRight(b0, 4, 1) ^ (8 * a0) % 16;
		int a2;
		int b2;
		if (type == Q0) {
			a2 = q0[0][a1];
			b2 = q0[1][b1];
		} else {
			a2 = q1[0][a1];
			b2 = q1[1][b1];
		}
		int a3 = a2 ^ b2;
		int b3 = a2 ^ CyclicShift.toRight(b2, 4, 1) ^ (8 * a2) % 16;
		int a4;
		int b4;
		if (type == Q0) {
			a4 = q0[2][a3];
			b4 = q0[3][b3];
		} else {
			a4 = q1[2][a3];
			b4 = q1[3][b3];
		}
		byte y = (byte)(b4 * 16 + a4);
		return y;
	}
}